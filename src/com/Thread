Interface Runnable (run)
In most cases, the Runnable interface should be used if you are only planning to override the run() method and no other Thread methods. 
This is important because classes should not be subclassed unless the programmer intends on modifying or enhancing the fundamental behavior of the class.


Interface Future<V>
A Future represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, 
to wait for its completion, and to retrieve the result of the computation. 
The result can only be retrieved using method get when the computation has completed, blocking if necessary until it is ready. 
Cancellation is performed by the cancel method. Additional methods are provided to determine if the task completed normally or was cancelled. 
Once a computation has completed, the computation cannot be cancelled. 
If you would like to use a Future for the sake of cancellability but not provide a usable result, you can declare types of the form Future<?> 
and return null as a result of the underlying task.


Interface RunnableFuture<V> extends Runnable, Future<V>
A Future that is Runnable. Successful execution of the run method causes completion of the Future and allows access to its results.


Class FutureTask<V>
(extends Object
implements RunnableFuture<V>)
